{
  "$schema": "http://json-schema.org/draft-04/schema",
  "description": "Configuration file for coc.nvim",
  "additionalProperties": false,
  "definitions": {
    "languageServerSocket": {
      "type": "object",
      "additionalProperties": false,
      "required": ["port", "filetypes"],
      "properties": {
        "port": {
          "type": "integer",
          "description": "Port number of socket server"
        },
        "host": {
          "type": "string",
          "default": "127.0.0.1",
          "description": "Host of server"
        },
        "enable": {
          "type": "boolean",
          "default": true
        },
        "rootPatterns": {
          "type": "array",
          "default": [],
          "description": "Root patterns to for reoslve rootPath from current file, default to g:rooter_patterns variable.",
          "items": {
            "type": "string"
          }
        },
        "filetypes": {
          "type": "array",
          "default": [],
          "description": "Supported filetypes",
          "items": {
            "type": "string"
          }
        },
        "revealOutputChannelOn": {
          "type": "string",
          "default": "error",
          "enum": ["info", "warn", "error", "never"]
        },
        "initializationOptions": {
          "type": "object",
          "default": {},
          "description": "initializationOptions passed to languageserver"
        },
        "settings": {
          "type": "object",
          "default": {},
          "description": "Settings of languageserver"
        },
        "configSection": {
          "type": "string",
          "default": {},
          "description": "Config section of languageserver"
        },
        "trace.server": {
          "type": "string",
          "default": "off",
          "enum": ["off", "messages", "verbose"]
        }
      }
    },
    "languageServerModule": {
      "type": "object",
      "required": ["module", "filetypes"],
      "additionalProperties": false,
      "properties": {
        "module": {
          "type": "string",
          "default": "",
          "description": "Absolute path of javascript file, should works in IPC mode"
        },
        "args": {
          "type": "array",
          "default": [],
          "description": "Arguments of module",
          "items": {
            "type": "string"
          }
        },
        "rootPatterns": {
          "type": "array",
          "default": [],
          "description": "Root patterns to for reoslve rootPath from current file, default to g:rooter_patterns variable.",
          "items": {
            "type": "string"
          }
        },
        "filetypes": {
          "type": "array",
          "default": [],
          "description": "Supported filetypes",
          "items": {
            "type": "string"
          }
        },
        "enable": {
          "type": "boolean",
          "default": true
        },
        "cwd": {
          "type": "string",
          "default": "",
          "description": "Working directory of languageserver, absolute path or relative to workspace folder, use workspace root by default"
        },
        "env": {
          "type": "array",
          "default": null,
          "description": "Environment variable for child process.",
          "items": {
            "type": "string"
          }
        },
        "execArgv": {
          "type": "array",
          "default": ["--nolazy", "--inspect-brk=6045"],
          "description": "Argv passed to node when using module, normally used for debugging",
          "items": {
            "type": "string"
          }
        },
        "revealOutputChannelOn": {
          "type": "string",
          "default": "error",
          "enum": ["info", "warn", "error", "never"]
        },
        "initializationOptions": {
          "type": "object",
          "default": {},
          "description": "initializationOptions passed to languageserver"
        },
        "settings": {
          "type": "object",
          "default": {},
          "description": "Settings of languageserver"
        },
        "configSection": {
          "type": "string",
          "default": {},
          "description": "Config section of languageserver"
        },
        "trace.server": {
          "type": "string",
          "default": "off",
          "enum": ["off", "messages", "verbose"]
        }
      }
    },
    "languageServerCommand": {
      "type": "object",
      "required": ["command", "filetypes"],
      "additionalProperties": false,
      "properties": {
        "command": {
          "type": "string",
          "default": "",
          "description": "Executable in $PATH to start languageserver, should not used with module"
        },
        "args": {
          "type": "array",
          "default": [],
          "description": "Arguments of command",
          "items": {
            "type": "string"
          }
        },
        "rootPatterns": {
          "type": "array",
          "default": [],
          "description": "Root patterns to for reoslve rootPath from current file, default to g:rooter_patterns variable.",
          "items": {
            "type": "string"
          }
        },
        "filetypes": {
          "type": "array",
          "default": [],
          "description": "Supported filetypes",
          "items": {
            "type": "string"
          }
        },
        "enable": {
          "type": "boolean",
          "default": true
        },
        "execArgv": {
          "type": "array",
          "default": ["--nolazy", "--inspect-brk=6045"],
          "description": "Args passed to node, only available when args contains --node-ipc",
          "items": {
            "type": "string"
          }
        },
        "cwd": {
          "type": "string",
          "default": "",
          "description": "Working directory of languageserver, absolute path or relative to workspace folder, use workspace root by default"
        },
        "env": {
          "type": "array",
          "default": null,
          "description": "Environment variable for child process.",
          "items": {
            "type": "string"
          }
        },
        "detached": {
          "type": "boolean",
          "default": false,
          "description": "Detach the languageserver process"
        },
        "shell": {
          "type": "boolean",
          "default": false,
          "description": "Use shell for process"
        },
        "revealOutputChannelOn": {
          "type": "string",
          "default": "error",
          "enum": ["info", "warn", "error", "never"]
        },
        "initializationOptions": {
          "type": "object",
          "default": {},
          "description": "initializationOptions passed to languageserver"
        },
        "settings": {
          "type": "object",
          "default": {},
          "description": "Settings of languageserver"
        },
        "configSection": {
          "type": "string",
          "default": {},
          "description": "Config section of languageserver"
        },
        "trace.server": {
          "type": "string",
          "default": "off",
          "enum": ["off", "messages", "verbose"]
        }
      }
    }
  },
  "properties": {
    "coc.preferences.autoTrigger": {
      "type": "string",
      "default": "always",
      "description": "How should completion be triggered",
      "enum": ["always", "trigger", "none"]
    },
    "coc.preferences.languageSourcePriority": {
      "type": "number",
      "default": 99,
      "description": "Priority of language sources."
    },
    "coc.preferences.rootPath": {
      "type": "string",
      "default": "",
      "description": "rootPath of language server, relative to folder of current file, it's workspace only.'"
    },
    "coc.preferences.hoverTarget": {
      "type": "string",
      "default": "preview",
      "description": "Target to show hover information, default is preview window, could also be echo",
      "enum": ["preview", "echo"]
    },
    "coc.preferences.snippetIndicator": {
      "type": "string",
      "default": "~",
      "description": "The characer used in abbr of complete item to indicate the item could be expand as snippet."
    },
    "coc.preferences.maxCompleteItemCount": {
      "type": "number",
      "default": 50,
      "description": "Maxmium number of complete items shown in vim"
    },
    "coc.preferences.preferCompleteThanJumpPlaceholder": {
      "type": "boolean",
      "description": "Confirm completion instead of jump to next placeholder when completion is activted.",
      "default": false
    },
    "coc.preferences.fixInsertedWord": {
      "type": "boolean",
      "description": "Make inserted word replace word characers after cursor position.",
      "default": true
    },
    "coc.preferences.localityBonus": {
      "type": "boolean",
      "description": "Boost suggestions that appear closer to the cursor position.",
      "default": true
    },
    "coc.preferences.colorSupport": {
      "type": "boolean",
      "description": "Enable color highlight if language server support it.",
      "default": true
    },
    "coc.preferences.maxColorCount": {
      "type": "number",
      "default": 1000,
      "description": "Maxmium number of color range to highlight vim, default 1000"
    },
    "coc.preferences.triggerAfterInsertEnter": {
      "type": "boolean",
      "description": "Trigger completion after InsertEnter, auto trigger should be always to enable this option",
      "default": false
    },
    "coc.preferences.timeout": {
      "type": "integer",
      "default": 500,
      "description": "Timeout for completion, in miliseconds."
    },
    "coc.preferences.minTriggerInputLength": {
      "type": "number",
      "default": 1,
      "description": "Mininal input length for trigger completion, default 1"
    },
    "coc.preferences.triggerCompletionWait": {
      "type": "integer",
      "default": 60,
      "description": "Wait time between trigger character type and completion start, for wait server content synchronize."
    },
    "coc.preferences.echodocSupport": {
      "type": "boolean",
      "default": false,
      "description": "When enabled, add function signature to user_data.signature to support echodoc.vim"
    },
    "coc.preferences.acceptSuggestionOnCommitCharacter": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character."
    },
    "coc.preferences.noselect": {
      "type": "boolean",
      "description": "Not make vim select first item on completion start",
      "default": true
    },
    "coc.preferences.parseKeywordsLimitLines": {
      "type": "number",
      "description": "Limit the lines of buffer for parse keywords on change.",
      "default": 5000
    },
    "coc.preferences.hyphenAsKeyword": {
      "type": "boolean",
      "description": "Always consider `-` as keyword characer when parsing buffer for keywords.",
      "default": true
    },
    "coc.preferences.triggerSignatureHelp": {
      "type": "boolean",
      "description": "Show signature help when trigger characer typed.",
      "default": true
    },
    "coc.preferences.formatOnSaveFiletypes": {
      "type": "array",
      "default": [],
      "description": "Filetypes that should run format on save.",
      "items": {
        "type": "string"
      }
    },
    "coc.preferences.watchmanPath": {
      "type": "string",
      "description": "executable path for https://facebook.github.io/watchman/, detected from $PATH by default",
      "default": ""
    },
    "coc.preferences.openResourceCommand": {
      "type": "string",
      "description": "Command used for open resource.",
      "default": "edit",
      "enum": ["edit", "split", "vsplit", "tabe"]
    },
    "coc.preferences.jumpCommand": {
      "type": "string",
      "description": "Command used for location jump, like goto definition, goto references etc.",
      "default": "edit",
      "enum": ["edit", "split", "vsplit", "tabe"]
    },
    "coc.preferences.messageLevel": {
      "type": "string",
      "description": "Message level for filter echoed messages, could be 'more', 'warning' and 'error'",
      "default": "more",
      "enum": ["more", "warning", "error"]
    },
    "coc.preferences.useQuickfixForLocations": {
      "type": "boolean",
      "description": "Use quickfix list for locations when there're more than one location, default: true",
      "default": true
    },
    "coc.preferences.formatOnType": {
      "type": "boolean",
      "description": "Set to true to enable format on type",
      "default": false
    },
    "coc.preferences.snippets.enable": {
      "type": "boolean",
      "description": "Set to false to disable snippets",
      "default": true
    },
    "coc.preferences.diagnostic.level": {
      "type": "string",
      "description": "Used for filter diagnostics by diagnostic severity.",
      "default": "hint",
      "enum": ["hint", "information", "warning", "error"]
    },
    "coc.preferences.diagnostic.enable": {
      "type": "boolean",
      "description": "Set to false to disable diagnostic display",
      "default": true
    },
    "coc.preferences.diagnostic.displayByAle": {
      "type": "boolean",
      "description": "Use Ale for display diagnostics in vim, will disable coc for display diagnostics.",
      "default": false
    },
    "coc.preferences.diagnostic.enableMessage": {
      "type": "boolean",
      "description": "Set to false to disable echo message on CursorMove",
      "default": true
    },
    "coc.preferences.diagnostic.locationlist": {
      "type": "boolean",
      "description": "Create location list for error & warning",
      "default": true
    },
    "coc.preferences.diagnostic.highlightOffset": {
      "type": "number",
      "description": "Offset number of buffer.addHighlight, neovim only.",
      "default": 1000
    },
    "coc.preferences.diagnostic.signOffset": {
      "type": "number",
      "description": "Offset number of sign",
      "default": 1000
    },
    "coc.preferences.diagnostic.errorSign": {
      "type": "string",
      "description": "Text of error sign",
      "default": ">>"
    },
    "coc.preferences.diagnostic.warningSign": {
      "type": "string",
      "description": "Text of warning sign",
      "default": "⚠"
    },
    "coc.preferences.diagnostic.infoSign": {
      "type": "string",
      "description": "Text of info sign",
      "default": ">>"
    },
    "coc.preferences.diagnostic.hintSign": {
      "type": "string",
      "description": "Text of hint sign",
      "default": ">>"
    },
    "coc.preferences.codeLens.enable": {
      "type": "boolean",
      "description": "Enable codeLens feature, require neovim with set virtual text feature.",
      "default": true
    },
    "coc.preferences.codeLens.separator": {
      "type": "string",
      "description": "Separator text for codeLens in virtual text",
      "default": "‣"
    },
    "coc.source.around.enable": {
      "type": "boolean",
      "default": true
    },
    "coc.source.around.shortcut": {
      "type": "string",
      "default": "A"
    },
    "coc.source.around.priority": {
      "type": "integer",
      "default": 1
    },
    "coc.source.buffer.enable": {
      "type": "boolean",
      "default": true
    },
    "coc.source.buffer.shortcut": {
      "type": "string",
      "default": "B"
    },
    "coc.source.buffer.priority": {
      "type": "integer",
      "default": 1
    },
    "coc.source.buffer.ignoreGitignore": {
      "type": "boolean",
      "default": true,
      "description": "Ignore git ignored files for buffer words"
    },
    "coc.source.file.enable": {
      "type": "boolean",
      "default": true
    },
    "coc.source.file.shortcut": {
      "type": "string",
      "default": "F"
    },
    "coc.source.file.priority": {
      "type": "integer",
      "default": 10
    },
    "coc.source.file.triggerCharacters": {
      "type": "array",
      "default": ["/"],
      "items": {
        "type": "string"
      }
    },
    "coc.source.file.trimSameExts": {
      "type": "array",
      "default": [".ts", ".js"],
      "description": "Trim same extension on file completion",
      "items": {
        "type": "string"
      }
    },
    "coc.source.file.ignoreHidden": {
      "type": "boolean",
      "default": true,
      "description": "Ignore completion for hidden files"
    },
    "coc.source.file.ignorePatterns": {
      "type": "array",
      "default": [],
      "description": "Ignore patterns of matcher",
      "items": {
        "type": "string"
      }
    },
    "http.proxy": {
      "type": "string",
      "default": "",
      "description": "http proxy used for json server"
    },
    "http.proxyStrictSSL": {
      "type": "boolean",
      "default": true
    },
    "languageserver": {
      "type": "object",
      "default": {},
      "description": "List of languageservers",
      "patternProperties": {
        "^[_a-zA-Z]+$": {
          "oneOf": [
            {
              "$ref": "#/definitions/languageServerModule"
            },
            {
              "$ref": "#/definitions/languageServerCommand"
            },
            {
              "$ref": "#/definitions/languageServerSocket"
            }
          ]
        }
      }
    }
  }
}
