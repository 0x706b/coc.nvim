*coc-nvim.txt*				Completion framework for neovim

Version: 0.1
Author: Qiming Zhao <chemzqm at gmail.com>
License: MIT license

CONTENTS					*coc-contents*

Introduction		|coc-introduction|
Install			|coc-install|
Configuration 		|coc-configuration|
Completion   		|coc-completion|
Interface		|coc-interface|
  Keymapings 		|coc-keymapings|
  Variables		  |coc-variables|
  Functions		  |coc-functions|
  Commands		  |coc-commands|
  Autocmds 		  |coc-autocmds|
Denite support 		|coc-denite|
  Denite source  	|coc-denite-source|
  Denite diagnostic     |coc-denite-diagnostic|
  Denite symbols        |coc-denite-symbols|
  Denite workspace      |coc-denite-workspace|
  Denite service        |coc-denite-service|
  Denite command        |coc-denite-command|
Statueline support      |coc-status|
  Manual                |coc-status-manual|
  Airline 		|coc-status-airline|
  Lightline  		|coc-stauts-lightline|
Custom Source 		|coc-custom-source|
Faq			|coc-faq|
Changelog		|coc-changelog|

==============================================================================
INTRODUCTION					*coc-introduction*

Coc tries to make best experience of LSP features, especially for completion.

It has intergration with some best language server extensions from VSCode, and
you can configure coc to work with custom language server as well.

==============================================================================
INSTALL						*coc-install*

Install [nodejs](http://nodejs.org/) version > 8.0.

Install [yarn](https://yarnpkg.com/en/docs/install)

Use plugin manager, like https://github.com/junegunn/vim-plug by add: >

  Plug 'neoclide/coc.nvim', {'do': 'yarn install'}

to your `init.vim` and run: >

  :PlugInstall

then restart neovim.

==============================================================================
COMPLETION					*coc-completion*

To make completion easier, there're some common practices.

Check out https://github.com/neoclide/coc.nvim/wiki/Configuration-of-completion

==============================================================================
CONFIGURATION					*coc-configuration*

Coc use jsonc formated file named `coc-settings.json` for configuration.

You can create user configuration and/or workspace configuration file to best fit
your need.

Check out https://github.com/neoclide/coc.nvim/wiki/Using-configuration-file
for detail.

Check out file 'settings.json' for all available options.

==============================================================================
INTERFACE					*coc-interface*

Mapping starts with 'n_' works for normal mode, and 'v_' works for visual
mode.

------------------------------------------------------------------------------
Keymapings 					*coc-keymapings*

<Plug>(coc-diagnostic-next) 			*n_coc-diagnostic-next*
			
			Jump to next diagnostic position.

<Plug>(coc-diagnostic-prev) 			*n_coc-diagnostic-prev*
			
			Jump to previous diagnostic position.

<Plug>(coc-definition) 				*n_coc-definition*

			Jump to definition of current symbol.

<Plug>(coc-implementation) 			*n_coc-implementation*

			Jump to implementations of current symbol.

<Plug>(coc-type-definition) 			*n_coc-type-definition*

			Jump to type definition of current symbol.

<Plug>(coc-references) 				*n_coc-references*

			Jump to references of current symbol.

<Plug>(coc-format-selected) 			*n_coc-format-selected*
						*v_coc-format-selected*

			Format selected range, would work in both visual mode
			and normal mode, when work in normal mode, the
			selections works on motion object.

	For example: >

	vmap <leader>p  <Plug>(coc-format-selected)
	nmap <leader>p  <Plug>(coc-format-selected)
<
	makes `<leader>p` format visual selected range, and you can use
	`<leader>pap` to format a paragraph.

<Plug>(coc-format) 				*n_coc-format*

			Format whole buffer, normally you would like to use a
			command like: >

	command! -nargs=0 Format :call CocAction('format')
<
			to format current buffer.

<Plug>(coc-rename) 				*n_coc-rename*

			Rename symbol under cursor to a new word.

<Plug>(coc-codeaction) 				*n_coc-codeaction*

			Get and run code action(s) for current line.

<Plug>(coc-codeaction-selected) 		*n_coc-codeaction-selected*
						*v_coc-codeaction-selected*

			Get and run code action(s) with selected region.
			Works with both normal and visual mode.


------------------------------------------------------------------------------
VARIABLES 					*coc-variables*

g:coc_force_debug  				*g:coc_force_debug*

			Coc would use precompiled binary when the binary file
			exists, set this to 1 to use complied code instead of
			prebuild binary.

			Default: 0


g:coc_snippet_next                            	*g:coc_snippet_next*

			Trigger key for goto next snippet position, applied
			on insert and select mode.

			Default: <C-j>

g:coc_snippet_prev                            	*g:coc_snippet_prev*

			Trigger key for goto previous snippet position,
			applied on insert and select mode.

			Default: <C-k>

g:coc_selectmode_mapping			*g:coc_selectmode_mapping*

			Add key mappings for make snippet select mode easier.  >
			
			snoremap <silent> <BS> <c-g>c
			snoremap <silent> <DEL> <c-g>c
			snoremap <silent> <c-h> <c-g>c
			snoremap <c-r> <c-g>"_c<c-r>
<
			Default: 1

g:coc_codelen_jump_key 				*g:coc_codelen_jump_key*

			Jump key for jump to original position in codeLens
			buffer.

			Default: <CR>

g:coc_codelen_action_key 			*g:coc_codelen_action_key*

			Do command of codeLens in codeLens buffer, a prompt
			would be shown if multiply codeLens found at the
			same line.

			Default: <d>

b:coc_diagnostic_info 				*b:coc_diagnostic_info*
			Diagnostic infomation of current buffer, can be used
			for customize status line. See |coc-status|.

g:nvim_node_rpc_debug 				*g:nvim_node_rpc_debug*
			Log channel commucation by using |ch_logfile|. Vim
			only.

------------------------------------------------------------------------------
FUNCTIONS 					*coc-functions*

Coc functions are normally used by user defined command/keymap or other
plugins.

Note: Your vim could be significantly show if you call 'CocAction' on vim
startup, you can avoid this issue by add guard code: 
>
    if !get(g:, 'coc_enabled', 0)
      return ''
    endif
<
before the call of ''CocAction'

						*coc-action*
CocAction({action}, [...{args}])

	Run {action} of coc with optional extra {args}.
	
Available Actions ~

"sourceStat" 					*coc-action-sourceStat*
	
	get the list of completion source stats for current buffer.

"refreshSource" [{source}]  			*coc-action-refreshSource*

	refresh all sources or {source} as name of source.

"toggleSource" {source} 			*coc-action-toggleSource*

	enable/disable {source}.

"diagnosticList" 				*coc-action-diagnosticList*

	Get all diagnostic items of current neovim session.

"diagnosticInfo" 				*coc-action-diagnosticInfo*

	Get diagnostic info of current buffer, the format would like:

	`{'error': 0, 'warning': 0, 'infomation': 0, 'hint':0}`

"jumpDefinition" 				*coc-action-jumpDefinition*

	jump to definition position of current symbol. Use <C-o> and <C-i> to
	jump forward and backward.

	Quickfix list is used when more than one position available.

"jumpImplementation" 				*coc-action-jumpImplementation*

	Jump to implementation position of current symbol.

	Quickfix list is used when more than one position available.

"jumpTypeDefinition" 				*coc-action-jumpTypeDefinition*

	Jump to type definition position of current symbol.

	Quickfix list is used when more than one position available.

"jumpReferences" 				*coc-action-jumpReferences*

	Jump to references position of current symbol.

	Quickfix list is used when more than one position available.

"doHover" 					*coc-action-doHover*

	Show documentation of current word at preview window.

	Note: the behavior would change when floating windows available for
	neovim.

"showSignatureHelp" 				*coc-action-showSignatureHelp*

	Echo signature help of current function, you may want to setup autocmd
	like this: >

	autocmd CursorHoldI,CursorMovedI * call CocAction('showSignatureHelp')
<

"documentSymbols" 				*coc-action-documentSymbols*

	Get symbol list of current document.

	Used by |coc-denite-symbols|

"rename" 					*coc-action-rename*

	Do rename for symbol under cursor position, user would be prompted for
	new name.

"workspaceSymbols" 				*coc-action-workspaceSymbols*

	Search for workspace symbols.

	Used for |coc-denite-workspace|.

	Note: the experience would be improved when floating window feature
	launched.

"services" 					*coc-action-services*

	Get all services infomation list.

	used for |coc-denite-service|

"toggleService" {serviceId} 			*coc-action-toggleService*

	Start or stop one service, used for |coc-denite-service|

"format" 					*coc-action-format*

	Format current buffer using language server.

	Note: some format provider only does indent while others include
	pretty functionality.

"codeAction" [{mode}] 				*coc-action-codeAction*

	prompty for a code action and do it.

	{mode} should be result of visualmode(), when used in visualmode,
	could be empty string for none visualmode.


"codeLens" 					*coc-action-codeLens*

	Open codelens buffer in split window, you can jump (use <CR> by
	default) and run command (use <d> by default).

"codeLensAction" 				*coc-action-codeLensAction*

	Do command from codeLens provider, should only be used in codelens
	buffer.

"commands" 					*coc-action-commands*

	Get available global service command id list of current buffer.

"runCommand" [{name}] 				*coc-action-runCommand*

	Run global command provided by language server, if {name} not
	provided, a prompt of command list is shown for select.

	You can bind your custom command like: >

	command! -nargs=0 OrganizeImport :call CocAction('runCommand', 'typescript.organizeImports')

------------------------------------------------------------------------------

						*coc#refresh()*
coc#refresh()

	Start or refresh completion at current cursor position, bind this to
	'imap' for trigger completion, like: >

	inoremap <silent><expr> <c-space> coc#refresh()
<

						*health#coc#check()*
health#coc#check()
	
	Run health check, triggered by ':checkhealth' command.

						*nvim#rpc#open_log*

nvim#rpc#open_log

	Open log of channel, vim only. Set |g:nvim_node_rpc_debug| to 1 to
	enable log.

------------------------------------------------------------------------------

COMMANDS 					*coc-commands*


:CocDisable 					*coc-command-disable*
		Disable completion of coc

:CocEnable 					*coc-command-enable*
		Enable completion of coc

:CocRefresh [{name}]				*coc-command-refresh*

		Refresh source of {name}, or all sources without {name}.

:CocConfig 					*coc-command-config*

		Open config file `coc-setting.json`


------------------------------------------------------------------------------

AUTOCMD 					*coc-autocmds*

						*CocQuickfixChange*

:autocmd User CocQuickfixChange {command}

		Normally used for open a list view of quickfix results,
		for example: >

  		autocmd User CocQuickfixChange :copen

		autocmd User CocQuickfixChange :Denite -mode=normal quickfix
<
		If you want to keep the behavior of open quickfix list after
		every time quickfix list change, can use command like:
>
 		autocmd QuickFixCmdPost * botright copen 8
<

==============================================================================
DENITE SUPPORT 					*coc-denite*

Coc make use of list interface provided by |denite.nvim| for better filter & sort
experience and advanced actions.

------------------------------------------------------------------------------
						*coc-denite-sources*
:Denite coc-source

	Show all sources of coc completion.

	Actions:

	'toggle': enable/disable the source(s) for current vim sesion.

	'refresh': refresh selected source(s).

------------------------------------------------------------------------------
						*coc-denite-diagnostic*
:Denite coc-diagnostic

	Show all diagnostics of current vim sesion.

	Actions: same as file kind, use `tab` in denite buffer to get the
	list.

------------------------------------------------------------------------------
:Denite coc-workspace 				*coc-denite-workspace*

	Search workspace symbols using denite buffer.

	Actions: same as file kind.

------------------------------------------------------------------------------
						*coc-denite-symbols*
:Denite coc-symbols

	Show symbols of current buffer.

	Actions: same as file kind, use `tab` in denite buffer to get the
	list.

------------------------------------------------------------------------------
						*coc-denite-service*
:Denite coc-service

	Manage coc services.

	Actions: 

	- 'toggle' : default action for start/stop service.

------------------------------------------------------------------------------
						*coc-denite-command*
:Denite coc-command

	Find and run command of current buffer.

	Actions: 

	- 'run' : default action.

==============================================================================
STATUSLINE SUPPORT 				*coc-status*

Show diagnostic info of current buffer in your statusline.

------------------------------------------------------------------------------

						*coc-status-manual*

Create function:
>
>
	function! StatusDiagnostic() abort
	  let info = get(b:, 'coc_diagnostic_info', {})
	  if empty(info) | return '' | endif
	  let msgs = []
	  if get(info, 'error', 0)
	    call add(msgs, 'E' . info['error'])
	  endif
	  if get(info, 'warning', 0)
	    call add(msgs, 'W' . info['warning'])
	  endif
	  return join(msgs, ' ')
	endfunction
<
Add `%{StatusDiagnostic()}` to your 'statusline' option.

------------------------------------------------------------------------------

						*coc-status-airline*

With vim-airline: https://github.com/vim-airline/vim-airline

Add configuration like: >

	" if you want to disable auto detect, comment out those two lines
	"let g:airline#extensions#disable_rtp_load = 1
	"let g:airline_extensions = ['branch', 'hunks', 'coc']

	let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
	let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

Change error symbol:
>
	let airline#extensions#coc#error_symbol = 'Error:'
<
Change warning symbol:
>
	let airline#extensions#coc#error_symbol = 'Warning:'
<
Change error format:
>
	let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
<
Change warning format:
>
	let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'

------------------------------------------------------------------------------
						*coc-status-lightline*

With lightline.vim: https://github.com/itchyny/lightline.vim
				
Use configuration like: >

  let g:lightline = {
	\ 'colorscheme': 'wombat',
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
	\ },
	\ 'component_function': {
	\   'cocstatus': 'coc#status'
	\ },
	\ }
<
To your .vimrc

==============================================================================
CUSTOM SOURCE					*coc-custom-source*

Create custom source in viml is supported.

Check out https://github.com/neoclide/coc.nvim/wiki/Create-custom-source

==============================================================================
FAQ						*coc-faq*

Check out https://github.com/neoclide/coc.nvim/wiki/F.A.Q

==============================================================================
CHANGELOG					*coc-changelog*

==============================================================================
vim:tw=78:nosta:noet:ts=8:sts=0:ft=help:noet:fen:fdm=marker:
