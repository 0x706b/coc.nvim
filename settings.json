{
  // could be 'always' 'trigger' => for specified trigger characters only 'none'
  "coc.preferences.autoTrigger": "always",
  // timeout for completion
  "coc.preferences.timeout": 300,
  // not make vim select first item on completion start
  "coc.preferences.noselect": true,
  // executable path for https://facebook.github.io/watchman/, detected from $PATH by default
  "coc.preferences.watchmanPath": "",
  // enable diagnoctic
  "coc.preferences.diagnoctic.enable": true,
  "coc.preferences.diagnoctic.signOffset": 1000,
  "coc.preferences.diagnoctic.errorSign": ">>",
  "coc.preferences.diagnoctic.warningSign": "âš ",
  "coc.preferences.diagnoctic.infoSign": ">>",
  "coc.preferences.diagnoctic.hintSign": ">>",
  "tsserver.enable": true,
  // language locale
  "tsserver.locale": null,
  // folder of tsserver.js
  // Default priority: module in node_modules > module in $PATH > bundled module
  "tsserver.tsdk": "",
  // absolute path of npm, infered from $PAHT if empty
  "tsserver.npm": "",
  // could be 'normal' 'terse' 'verbose' 'off'
  "tsserver.log": "off",
  // could be 'off' 'messages' 'verbose', could also be provided by environment variable 'TSS_TRACE'
  "tsserver.trace": "off",
  // module name of global plugins
  "tserver.pluginNames": [],
  // folder root of global plugins
  "tsserver.pluginRoot": "",
  // could also be provided by environment variable `TSS_DEBUG`
  "tsserver.debugPort": null,
  "tsserver.reportStyleChecksAsWarnings": true,
  "tsserver.implicitProjectConfig.checkJs": false,
  "tsserver.implicitProjectConfig.experimentalDecorators": false,
  "tsserver.disableAutomaticTypeAcquisition": false,
  // enable support for javascript file, experiment
  "tsserver.enableJavascript": true,
  "typescript.updateImportsOnFileMove.enable": true,
  "typescript.implementationsCodeLens.enable": true,
  "typescript.referencesCodeLens.enable": true,
  "typescript.preferences.completion.useCodeSnippetsOnMethodSuggest" : true,
  "typescript.preferences.completion.nameSuggestions" : true,
  "typescript.preferences.completion.autoImportSuggestions" : true,
  // if true comma if removed after import for on completionDone
  "typescript.preferences.completion.commaAfterImport" : true,
  "typescript.preferences.completion.moduleExports" : true,
  // 'non-relative' or 'relative'
  "typescript.preferences.importModuleSpecifier" : "non-relative",
  "typescript.preferences.suggestionActions.enabled" : true,
  // 'single' or 'double'
  "typescript.preferences.quoteStyle" : "single",
  "typescript.format.insertSpaceAfterCommaDelimiter" : true,
  "typescript.format.insertSpaceAfterConstructor" : false,
  "typescript.format.insertSpaceAfterSemicolonInForStatements" : true,
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators" : true,
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements" : true,
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions" : true,
  "typescript.format.insertSpaceBeforeFunctionParenthesis" : true,
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis" : false,
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces" : false,
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces" : false,
  "typescript.format.insertSpaceAfterTypeAssertion" : false,
  "typescript.format.placeOpenBraceOnNewLineForFunctions" : false,
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks" : false,
  "javascript.updateImportsOnFileMove.enable": true,
  "javascript.implementationsCodeLens.enable": true,
  "javascript.referencesCodeLens.enable": true,
  "javascript.preferences.completion.useCodeSnippetsOnMethodSuggest" : true,
  "javascript.preferences.completion.nameSuggestions" : true,
  "javascript.preferences.completion.autoImportSuggestions" : true,
  // 'non-relative' or 'relative'
  "javascript.preferences.importModuleSpecifier" : "non-relative",
  "javascript.preferences.suggestionActions.enabled" : true,
  "javascript.preferences.completion.commaAfterImport" : true,
  // 'single' or 'double'
  "javascript.preferences.quoteStyle" : "single",
  "javascript.format.insertSpaceAfterCommaDelimiter" : true,
  "javascript.format.insertSpaceAfterConstructor" : false,
  "javascript.format.insertSpaceAfterSemicolonInForStatements" : true,
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators" : true,
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements" : true,
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions" : true,
  "javascript.format.insertSpaceBeforeFunctionParenthesis" : true,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis" : false,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces" : false,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces" : false,
  "javascript.format.insertSpaceAfterTypeAssertion" : false,
  "javascript.format.placeOpenBraceOnNewLineForFunctions" : false,
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks" : false,
  "coc.source.around.enable": true,
  "coc.source.around.shortcut": "A",
  "coc.source.around.priority": 1,
  "coc.source.buffer.enable": true,
  "coc.source.buffer.shortcut": "B",
  "coc.source.buffer.priority": 1,
  // ignore keywords from git ignored files
  "coc.source.buffer.ignoreGitignore": true,
  "coc.source.dictionary.enable": true,
  "coc.source.dictionary.shortcut": "D",
  "coc.source.dictionary.priority": 1,
  "coc.source.emoji.enable": true,
  "coc.source.emoji.shortcut": "EMO",
  "coc.source.emoji.priority": 9,
  "coc.source.emoji.filetypes": ["markdown"],
  "coc.source.emoji.triggerCharacters": [":"],
  "coc.source.file.enable": true,
  "coc.source.file.shortcut": "F",
  "coc.source.file.priority": 10,
  "coc.source.file.triggerCharacters": ["/"],
  "coc.source.file.trimSameExts": [".ts", ".js"],
  "coc.source.file.ignoreHidden": true,
  // array of file patterns, like '*.bundle.js'
  "coc.source.file.ignorePatterns": [],
  "coc.source.include.enable": true,
  "coc.source.include.shortcut": "I",
  "coc.source.include.priority": 10,
  "coc.source.include.triggerCharacters": [],
  "coc.source.include.trimSameExts": [".ts", ".js"],
  // when ripgrep installed, it would be `rg --color never --files`
  "coc.source.include.listFileCommand": "",
  "coc.source.omni.enable": true,
  "coc.source.omni.shortcut": "O",
  "coc.source.omni.priority": 3,
  "coc.source.omni.filetypes": [],
  "coc.source.tag.enable": true,
  "coc.source.tag.shortcut": "T",
  "coc.source.tag.priority": 3,
  "coc.source.word.enable": true,
  "coc.source.word.shortcut": "10k",
  "coc.source.word.priority": 0,
  "coc.source.ultisnips.enable": true,
  "coc.source.ultisnips.priority": 3,
  "coc.source.ultisnips.shortcut": "US",
  "coc.source.neco.enable": true,
  "coc.source.neco.shortcut": "NECO",
  "coc.source.neco.priority": 9,
  "coc.source.neco.filetypes": ["vim"],
  "coc.source.neco.triggerCharacters": [":", "&"],
  "coc.source.neco.firstMatch": true,
  "cssserver.enable": true,
  "cssserver.filetypes": ["css", "scss", "less", "wxss"],
  "cssserver.css.validate": true,
  "cssserver.css.lint": true,
  "cssserver.scss.validate": true,
  "cssserver.scss.lint": true,
  "cssserver.less.validate": true,
  "cssserver.less.lint": true,
  "cssserver.wxss.validate": true,
  "cssserver.wxss.lint": true,
  "http.proxy": "",
  "http.proxyStrictSSL": "",
  "json.filetypes": ["json", "jsonc"],
  "json.format.enable": true,
  "json.schemas": [],
  // "json.execArgv": ["--nolazy", "--inspect=6045"],
  "languageserver": {},
  "html.enable": true,
  "html.filetypes": ["html", "handlebars", "razor"],
  // "html.execArgv": ["--nolazy", "--inspect-brk=6045"],
  "wxml.enable": true,
  "wxml.filetypes": ["wxml"],
  "wxml.complete.completeEvent": false,
  "wxml.complete.useSnippet": true,
  // "wxml.execArgv": ["--nolazy", "--inspect-brk=6045"],
  "tslint.jsEnable": false,
  "tslint.enable": true,
  "tslint.autoFixOnSave": false,
  "tslint.configFile": "tslint.json",
  "tslint.ignoreDefinitionFiles": false,
  "tslint.exclude": [],
  "tslint.validateWithDefaultConfig": true,
  // or onSave
  "tslint.run": "onType",
  "alwaysShowRuleFailuresAsWarnings": true,
}
// vim:ft=jsonc
